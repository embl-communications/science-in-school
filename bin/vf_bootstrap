#!/bin/bash

# Script performs WordPress bootstrap process with default Visual Framework configuration to setup group microsites.

set -x;
set -e;
set -u;

# determine root of repo
ROOT=$(cd $(dirname ${0})/.. 2>/dev/null && pwd -P);
cd ${ROOT};

## set environment & common variables
source ${ROOT}/common_config.sh ${2:-invalid};

# Default variables values
DEPLOY_PATH=${VM_CORE_PATH}/${RELATIVE_DOCUMENT_ROOT};
THEME_HEADER=vf_ebi_global_header;
THEME_FOOTER=vf_ebi_global_footer;
home_page_id="";
site_title="";
site_folder_name="";
who_slug="";
site_theme="";
HTACCESS_PREFIX_PATH="/";
SERVER_NAME=${4:-foo}

function usage {
  echo "VF Wordpress bootstrap & configuration deployment";
  echo "";
  echo "Usage: bin/vf_bootstrap <function> <ENVIRONMENT> [parameters]";
  echo "";
  echo "  Function is one of:";
  echo "    basic_setup        :- spin up standalone wordpress site";
  echo "    microsite_setup    :- spin up group microsites wordpress sites";
  echo "";
  echo "  Parameter sample is 'siteprofile.txt' only applies for microsites";
  echo "";
  echo "  Example of using commands:";
  echo "    'bin/vf_bootstrap basic_setup dev' :- spin up standalone wordpress site";
  echo "    'bin/vf_bootstrap microsite_setup dev web-development.txt' :- spin up microsite wordpress site";
  echo "";
  echo "";
  exit 1;
}

# Validate if we have correct required parameters to execute the script.
if [ -z "${1: }" ] || [ -z "${2: }" ] || [ -z "${3: }" ]; then
  usage;
  exit 1
fi

# check we have a list of servers to deploy to
[ -z "${ENVIRONMENT}" ] && echo "No environment specified, cannot continue." && exit 1;

# Set alias on non-local env for wpcli.
[ ${ENVIRONMENT} != "local" ] && alias wp="~/bin/wp";
shopt -s expand_aliases

# Third param is sitename.txt param required for groups site bootstrap process.
# If second param exists then set MICROSITE_FLAG TRUE else FALSE
MICROSITE_FILENAME=${3: } # Default blank for second param if not passed
[ -z "$MICROSITE_FILENAME" ] && MICROSITE_FLAG=0 || MICROSITE_FLAG=1

# Check if second param exits then check is correct filename.txt format
if [ "$MICROSITE_FLAG" -eq "1" ] ; then
    if [[ $MICROSITE_FILENAME == *.txt ]] ; then

        echo "  "
        echo "=== Starting bootstrap process for $MICROSITE_FILENAME ==="
        echo "  "
        CONTENTS=$(cat $MICROSITE_FILENAME);
        FILE_NAME=$(basename $MICROSITE_FILENAME);
        #extract specific variables defined in file, delimited by set characters
        DELIMITER=":";
        for VARS in site_title site_email_id site_folder_name who_slug what_slug where_slug site_theme ; do
            # set variable named above, variable will be defined but empty if not found in .txt file
            declare "$VARS=$(echo -e "$CONTENTS" | grep -E "^$VARS$DELIMITER" | cut -d"$DELIMITER" -f2)";
        done;

        # Get microsite folder & set microsite related variables
        microsite_deploy_data=($(microsite_deploy_profile_data "$site_theme" "$site_folder_name"));
        MICROSITE_PATH="${microsite_deploy_data[0]}";
        MICROSITE_SYM_PATH="${microsite_deploy_data[1]}";
        MICROSITE_FOLDER_NAME="${microsite_deploy_data[2]}";
        HTACCESS_PREFIX_PATH="${microsite_deploy_data[3]}";
        SITE_TAGLINE="${microsite_deploy_data[4]}";
        VF_THEME_COLOR="${microsite_deploy_data[5]}";
        GA_TRACKING_CODE="${microsite_deploy_data[6]}";
        # Theme settings variables
        THEME_HEADER="${microsite_deploy_data[7]}";
        THEME_FOOTER="${microsite_deploy_data[8]}";
        MICROSITE_SITE_URL="${microsite_deploy_data[9]}";

        # Define deploy path for microsite.
        DEPLOY_PATH=${MICROSITE_PATH}/${RELATIVE_DOCUMENT_ROOT};
        WP_SITE_TITLE=${site_title}
        WP_SITE_ADMIN_EMAIL=${site_email_id}
        WP_SITE_URL=${MICROSITE_SITE_URL}

    else
        echo "No microsite txt filename specified in second argument of script, cannot continue." && exit 1;
    fi # end MICROSITE_FILENAME if condition

fi # end MICROSITE_FLAG if condition

# Function to log the output of the deployment status
function on_script_exit() {
    JOB="$0"              # job name
    LASTLINE="$1"         # line of error occurrence
    exit_status="$2"      # error code
    echo "ERROR in ${JOB} : line ${LASTLINE} with exit code ${exit_status}"

    [ $exit_status -eq "0" ] && DEPLOY_STATUS='Success' || DEPLOY_STATUS='Failed';
    echo "Deployment of $MICROSITE_SITE_URL [$FILE_NAME] for Server [$SERVER_NAME] - $DEPLOY_STATUS" >> ${DEPLOYMENT_LOG_MAIN_FOLDER}/${DEPLOYMENT_STATUS_LOGFILE}
}
# Catch the errors which are generated by the current script.
trap 'on_script_exit "$LINENO" $?' EXIT

# Go to the deploy path i.e wordpress installation path to trigger 'wp' commands.
cd ${DEPLOY_PATH}/

# check site has been built
[ ! -d "${DEPLOY_PATH}" ] && echo "Wordpress installation not found, cannot continue" && exit 1;

# Check if wordpress tables/db installed, if not then install them.
# This condition applies in case of first time site installation.
if ! $(wp core is-installed); then
    echo "Installing Wordpress & configuring database"
    wp core install \
        --url=${WP_SITE_URL} \
        --title="${WP_SITE_TITLE}" \
        --admin_user=${WP_SITE_ADMIN_USERNAME} \
        --admin_password=$WP_SITE_ADMIN_PASSWORD \
        --admin_email=${WP_SITE_ADMIN_EMAIL}

fi # end of "core is-installed" condition

echo "VF default configuration setup started..."
echo ""
echo "=== VF theme & plugins ==="

# List of Array for default VF plugins
PLUGINS_LIST='
advanced-custom-fields-pro
vf-wp
embl-taxonomy
vf-beta-container
vf-breadcrumbs-container
vf-embl-news-container
vf-factoid-block
vf-latest-posts-block
vf-publications-block
vf-gutenberg
';

echo "VF Plugins - Activating default VF Plugins"
# Check if plugin is active, if not then activate plugins
for PLUGIN in ${PLUGINS_LIST}; do
    if ! $(wp plugin is-active ${PLUGIN}); then
        wp plugin activate ${PLUGIN}
    fi
done;

echo "Activating header/footer theme based plugins"
# Activate header/footer based on the theme given
if [ "$site_theme" = EBI* ]; then
     wp plugin activate 'vf-ebi-global-header-container' 'vf-ebi-global-footer-container'
else
    wp plugin activate 'vf-global-header-container' 'vf-global-footer-container'
fi

echo "VF theme - Activating VF theme"
if ! $(wp theme is-active vf-wp-groups); then
       wp theme activate "vf-wp-groups"
fi

# Default homepage content for EBI & EMBL groups
home_page_content='
  <!-- wp:acf/vf-group-header {"id":"block_5ebba207a5cce","name":"acf/vf-group-header","data":{"field_defaults":"1"},"mode":"preview"} /-->

<!-- wp:acf/vfwp-latest-posts {"id":"block_5ebba351a5cd0","name":"acf/vfwp-latest-posts","data":{"field_5e99679631cbd":"","field_5e9967a331cbe":""},"mode":"preview"} /-->

<!-- wp:acf/vf-data-resources {"id":"block_5ebba324a5ccf","name":"acf/vf-data-resources","data":{"field_defaults":"1"},"mode":"preview"} /-->

<!-- wp:acf/vf-jobs {"id":"block_5ebba1baa5ccb","name":"acf/vf-jobs","data":{"field_defaults":"0","field_vf_jobs_heading":"","field_vf_jobs_limit":"1","field_vf_jobs_filter":"all"},"mode":"preview"} /-->';


# Define postcontent of vf_template.
case "$site_theme" in
    EMBL)
      vf_template_content='
        <!-- wp:acf/vf-container-global-header {"id":"block_5ebb9edff871c","name":"acf/vf-container-global-header"} /-->

<!-- wp:acf/vf-container-breadcrumbs {"id":"block_5ebb9fd224009","name":"acf/vf-container-breadcrumbs"} /-->

<!-- wp:acf/vf-container-wp-groups-header {"id":"block_5ebb9fe02400a","name":"acf/vf-container-wp-groups-header"} /-->

<!-- wp:acf/vf-container-page-template {"id":"block_5ebb9edff871d","name":"acf/vf-container-page-template"} /-->

<!-- wp:acf/vf-container-embl-news {"id":"block_5ebb9fef2400b","name":"acf/vf-container-embl-news"} /-->

<!-- wp:acf/vf-container-global-footer {"id":"block_5ebb9edff871e","name":"acf/vf-container-global-footer"} /-->';
    ;;
    EMBL-SERVICES-FACILITIES)
      vf_template_content='
        <!-- wp:acf/vf-container-global-header {"id":"block_5ebb9edff871c","name":"acf/vf-container-global-header"} /-->

<!-- wp:acf/vf-container-breadcrumbs {"id":"block_5ebb9fd224009","name":"acf/vf-container-breadcrumbs"} /-->

<!-- wp:acf/vf-container-wp-groups-header {"id":"block_5ebb9fe02400a","name":"acf/vf-container-wp-groups-header"} /-->

<!-- wp:acf/vf-container-page-template {"id":"block_5ebb9edff871d","name":"acf/vf-container-page-template"} /-->

<!-- wp:acf/vf-container-embl-news {"id":"block_5ebb9fef2400b","name":"acf/vf-container-embl-news"} /-->

<!-- wp:acf/vf-container-global-footer {"id":"block_5ebb9edff871e","name":"acf/vf-container-global-footer"} /-->';

    # Set the Gutenberg HTML content for the homepage for facilities groups
    # Different homepage if its Services-Facilities sites.
    home_page_content='
    <!-- wp:acf/vf-group-header {"id":"block_5ebba207a5cce","name":"acf/vf-group-header","data":{"field_defaults":"1"},"mode":"preview"} /-->

  <!-- wp:acf/vfwp-latest-posts {"id":"block_5ebba351a5cd0","name":"acf/vfwp-latest-posts","data":{"field_5e99679631cbd":"","field_5e9967a331cbe":""},"mode":"preview"} /-->';
    ;;
    EBI-SERVICE|EBI-CLUSTERS|EBI-RESEARCH)
      vf_template_content='
       <!-- wp:acf/vf-container-ebi-global-header {"id":"block_5ebba0902400e","name":"acf/vf-container-ebi-global-header"} /-->

<!-- wp:acf/vf-container-breadcrumbs {"id":"block_5ebb9fd224009","name":"acf/vf-container-breadcrumbs"} /-->

<!-- wp:acf/vf-container-wp-groups-header {"id":"block_5ebb9fe02400a","name":"acf/vf-container-wp-groups-header"} /-->

<!-- wp:acf/vf-container-page-template {"id":"block_5ebb9edff871d","name":"acf/vf-container-page-template"} /-->

<!-- wp:acf/vf-container-embl-news {"id":"block_5ebb9fef2400b","name":"acf/vf-container-embl-news"} /-->

<!-- wp:acf/vf-container-ebi-global-footer {"id":"block_5ebba0942400f","name":"acf/vf-container-ebi-global-footer"} /-->';
    ;;
    *)
      # Default content
      vf_template_content='
        <!-- wp:acf/vf-container-global-header {"id":"block_5ebb9edff871c","name":"acf/vf-container-global-header"} /-->

<!-- wp:acf/vf-container-page-template {"id":"block_5ebb9edff871d","name":"acf/vf-container-page-template"} /-->

<!-- wp:acf/vf-container-global-footer {"id":"block_5ebb9edff871e","name":"acf/vf-container-global-footer"} /-->';
    ;;
  esac;


echo "=== Core pages & show_on_front config ==="
if [ $(wp option get show_on_front) != 'page' ] ; then
    # # Create some core pages

    # Create home page - Create only if it doesn't exists.
    if ! $(wp post list --post_type=page --fields=post_title --format=csv | grep -E "^Home"); then
        home_page_id=$(wp post create --post_title='Home' --post_type=page --post_status=publish --porcelain);
        wp post meta update $home_page_id vf_locked 1
        wp post meta update $home_page_id _vf_locked field_vf_locked
        wp option update page_on_front $home_page_id

        echo "Homepage - configuring"
        # Configure the homepage
        wp post update $home_page_id --post_content="$home_page_content"
    fi

    # # Core settings
    wp option update show_on_front 'page'
    wp option update date_format 'j F Y'
    wp option update default_ping_status 'closed'
    wp option update default_pingback_flag 0

    # Update Permalinks
    wp option update permalink_structure '/blog/%year%/%monthnum%/%postname%/'

    # Create menus

    # Create Primary menu - create only if doesn't exists.
    if ! $(wp menu list --fields=name | grep -qE "^Primary"); then
        primary_menu_id="$(wp menu create 'Primary' --porcelain)"
        wp menu location assign primary primary
    fi

    if ! $(wp menu list --fields=name | grep -qE "^Secondary"); then
        secondary_menu_id="$(wp menu create 'Secondary' --porcelain)"
        wp menu location assign secondary secondary
    fi

    # Update menu locations
    if ! $(wp menu item list primary --fields=title | grep -qE "^Home"); then
        wp menu item add-post primary $home_page_id --title="Home"
    fi
else
    echo "Core pages & show_on_frontconfig - already configured"
fi

# Update VF endpoints
wp option update options_vf_cdn_stylesheet $VF_CDN_STYLESHEET
wp option update options_vf_cdn_javascript $VF_CDN_JAVASCRIPT
wp option update options_vf_api_url $VF_API_URL

# Add tagline desc to the site
wp option update blogdescription $SITE_TAGLINE

# get the command and run it
COMMAND="${1}"; shift;
case "${COMMAND}" in

  basic_setup)
        echo "Configuring basic standalone site related VF setup"
        # Go to the deploy path i.e wordpress installation path to trigger 'wp' commands.
        cd ${DEPLOY_PATH}/
        # Code goes here...
        # Updated vf_template post content.  NOT NEEDED ANYMORE!!!!
#        vf_template_post_id="$(wp post list --name=default --post_type=vf_template --field=ID)";
#        wp post update $vf_template_post_id --post_content="$vf_template_content";

        ;;
  microsite_setup)

        echo "Configuring microsite related VF setup"
        # Go to the deploy path i.e wordpress installation path to trigger 'wp' commands.
        cd ${DEPLOY_PATH}/

        echo "Activating plugins required for microsite"
        MICROSITE_PLUGINS_LIST='
        vf-group-header-block
        vf-jobs-block
        vf-members-block
        onelogin-saml-sso
        user-role-editor
        vf-data-resources-block
        embl-group-site-roles
        ga-google-analytics
        vf-publications-group-ebi-block
        vf-embl-news-block
        widget-options
        vf-navigation-container
        vf-banner-container
        ';

        # Updated vf_template post content. NOT NEEDED ANYMORE!!!!
#        vf_template_post_id="$(wp post list --name='default' --post_type='vf_template' --field=ID)"
#        wp post update $vf_template_post_id --post_content="$vf_template_content"

        # Check if plugin is active, if not then activate plugins
        for PLUGIN in ${MICROSITE_PLUGINS_LIST}; do
            if ! $(wp plugin is-active ${PLUGIN}); then
                wp plugin activate ${PLUGIN}
            fi
        done;

        if [ $site_theme != "EMBL-SERVICES-FACILITIES" ]; then
            ### Apply below changes to all groups except "EMBL-SERVICES-FACILITIES" sites ###

            # Configure jobs plugin
            echo "=== Jobs ==="
            jobs_id="$(wp post list --name=vf_jobs --post_type=vf_block --field=ID)"
            if ! [[ `wp post meta get $jobs_id _vf_jobs_limit` ]] ; then
                echo "Jobs - configuring"
                wp post meta update $jobs_id vf_jobs_heading "Latest Jobs"
                wp post meta update $jobs_id _vf_jobs_heading field_vf_jobs_heading
                wp post meta update $jobs_id vf_jobs_limit 2
                wp post meta update $jobs_id _vf_jobs_limit field_vf_jobs_limit
            else
                echo "Jobs - already configured"
            fi

            # Create Publications page - Create only if it doesn't exists.
            if ! $(wp post list --post_type=page --fields=post_title --format=csv | grep -qE "^Publications"); then

                publications_page_id="$(wp post create --post_title='Publications' --post_type=page --post_status=publish --porcelain)"
                wp menu item add-post primary $publications_page_id --title="Publications"
                wp post meta update $publications_page_id _wp_page_template template-publications.php

                # Lock the team page agianst further edits from non-admins
                wp post meta update $publications_page_id vf_locked 1
                wp post meta update $publications_page_id _vf_locked field_vf_locked
            fi

        fi # End if EMBL-SERVICES-FACILITIES


        #### Common pages & configurations across all groups sites ####
        ###############################################################

        # Configure members plugin
        echo "=== Members ==="
        members_id="$(wp post list --name=vf_members --post_type=vf_block --field=ID)"
        if ! [[ `wp post meta get $members_id _vf_members_order` ]] ; then
            echo "Members - configuring"
            wp post meta update $members_id vf_members_limit 20
            wp post meta update $members_id _vf_members_limit field_vf_members_limit
            wp post meta update $members_id vf_members_order "DESC"
            wp post meta update $members_id _vf_members_order field_vf_members_order
        else
            echo "Members - already configured"
        fi

        # Configure latest posts plugin
        echo "=== Latest posts ==="
        posts_id="$(wp post list --name=vf_latest_posts --post_type=vf_block --field=ID)"
        if ! [[ `wp post meta get $posts_id _vf_latest_posts_heading_plural` ]] ; then
            echo "Latest posts - configuring"
            wp post meta update $posts_id vf_latest_posts_heading_singular "Latest blog post"
            wp post meta update $posts_id _vf_latest_posts_heading_singular field_vf_latest_posts_heading_singular
            wp post meta update $posts_id vf_latest_posts_heading_plural "Latest blog posts"
            wp post meta update $posts_id _vf_latest_posts_heading_plural field_vf_latest_posts_heading_plural
        else
            echo "Latest posts - already configured"
        fi

        # Configure taxonomy
        echo "=== Taxonomy ==="
        echo "Taxonomy - configuring"
        wp option update embl_taxonomy $VF_API_URL"pattern.json?pattern=embl-ontology&source=contenthub"
        wp option update _options_embl_taxonomy field_embl_taxonomy
        wp option update _options_embl_taxonomy_term_who field_embl_taxonomy_term_who
        wp option update _options_embl_taxonomy_term_what field_embl_taxonomy_term_what
        wp option update _options_embl_taxonomy_term_where field_embl_taxonomy_term_where

        # Clear the cached API calls if any.
        trash_ids="$(wp post list --post_type='vf_cache' --format=ids)"
        if [ -n "$trash_ids" ]; then
            wp post delete $trash_ids --force
        fi;

        # Sync with the latest taxonomy from the contentHub
        echo "Updating Taxonomy from ContentHub"
        wp eval 'embl_taxonomy()->register->sync_taxonomy();'


        # Configure taxonomy terms
        # In case of microsites get from sitename.txt file
        who_id="$(wp term list embl_taxonomy --slug=${who_slug} --field=term_taxonomy_id)"
        if [ -n "$who_id" ]; then
          wp option update embl_taxonomy_term_who $who_id
          wp option update options_embl_taxonomy_term_who $who_id
        fi;
        what_id="$(wp term list embl_taxonomy --slug=${what_slug} --field=term_taxonomy_id)"
        if [ -n "$what_id" ]; then
          wp option update embl_taxonomy_term_what $what_id
          wp option update options_embl_taxonomy_term_what $what_id
        fi;
        where_id="$(wp term list embl_taxonomy --slug=${where_slug} --field=term_taxonomy_id)"
        if [ -n "$where_id" ]; then
          wp option update embl_taxonomy_term_where $where_id
          wp option update options_embl_taxonomy_term_where $where_id
        fi;

        # Create About page - Create only if it doesn't exists.
        if ! $(wp post list --post_type=page --fields=post_title --format=csv | grep -qE "^About"); then
            about_page_id="$(wp post create --post_title='About' --post_type=page --post_status=publish --porcelain)"
            wp menu item add-post primary $about_page_id --title="About"
        fi

        # Create pages for team list and nav
        echo "=== Members, about and blog ==="
        members_page_content='<!-- wp:acf/vf-members {"id":"block_5ebba3effc3ea","name":"acf/vf-members","data":{"field_defaults":"1"},"mode":"preview"} /-->';
        # Create Members page - Create only if it doesn't exists.
        if ! $(wp post list --post_type=page --fields=post_title --format=csv | grep -qE "^Members"); then
            # Set the Gutenberg HTML content for the members page
            team_page_id="$(wp post create --post_title='Members' --post_type=page --post_status=publish --post_content="$members_page_content" --porcelain)"
            wp menu item add-post primary $team_page_id --title="Members"
            wp post meta update $team_page_id _wp_page_template template-members.php

            # Lock the team page agianst further edits from non-admins
            wp post meta update $team_page_id vf_locked 1
            wp post meta update $team_page_id _vf_locked field_vf_locked
        fi
#        else
#            # Get members page id and update content
##            team_page_id="$(wp post list --name='Members' --post_type=page --field=ID)"
##            wp post update $team_page_id --post_content="$members_page_content"
#        fi

        # Create blog page - Create only if it doesn't exists.
        if ! $(wp post list --post_type=page --fields=post_title --format=csv | grep -qE "^Blog"); then
            blog_page_id="$(wp post create --post_title='Blog' --post_type=page --post_status=publish --porcelain)"

            wp post meta update $blog_page_id vf_locked 1
            wp post meta update $blog_page_id _vf_locked field_vf_locked
            wp option update page_for_posts $blog_page_id
            if ! $(wp menu item list primary --fields=title --format=csv | grep -qE "^Blog"); then
                wp menu item add-post primary $blog_page_id --title="Blog"
            fi
        fi

        default_blog_post_content="<!-- wp:paragraph -->
<p>This is your first post. Edit or delete it, or write a new post!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {\"level\":3} -->
<h3>Writing a new blog post</h3>
<!-- /wp:heading -->

<!-- wp:list {\"ordered\":true} -->
<ol><li>To write a new blog post, click on 'Posts' in the administration menu. </li><li>Next to the title, click the button 'Add New'.</li><li>Get writing!</li><li>Don't forget to include any document options in the sidebar.</li><li>When you are ready, you can either save the post, Preview it, or Publish.</li></ol>
<!-- /wp:list -->

<!-- wp:heading {\"level\":3} -->
<h3>Deleting a post</h3>
<!-- /wp:heading -->

<!-- wp:list {\"ordered\":true} -->
<ol><li>Click on 'Posts' in the administration menu. </li><li>Navigate to the post you want to delete and hover over the title. You should see the links: 'Edit', Quick Edit', 'Trash' and 'View'. Trash is in red.</li><li>Click 'Trash'. This moves your blog post into the trash where it is always retrievable unless you delete it permanently.</li><li>To retrieve your blog post, Click on the 'Trash' navigation link next to 'All' at the top of the table of blog posts.</li></ol>
<!-- /wp:list -->

<!-- wp:heading {\"level\":3} -->
<h3>Removing the blog from your navigation menu</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you decide you don't want a blog for your group or team then you should remove it from the site's navigation menu.</p>
<!-- /wp:paragraph -->

<!-- wp:list {\"ordered\":true} -->
<ol><li>In the administration menu, click on 'Appearance'</li><li>In the Appearance sub-menu, click 'Menus'</li><li>Find the menu item 'Blog' and click the arrow to reveal options.</li><li>Click 'Remove'</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Don't worry, you can always add it again. Doing this doesn't delete the blog, or the blog posts, but just removes the link in the navigation.</p>
<!-- /wp:paragraph -->";

        # Update blog post content

       wp post update 1 --post_title="Welcome to your new group or team blog!" --post_content="$default_blog_post_content" || true;

       # Set the Google analytics settings
       #db_ga_options_value="$(wp option pluck gap_options gap_id)"
       #if [ ! "$db_ga_options_value" ]; then
       if ! [[ `wp option pluck gap_options gap_id` ]] ; then
            wp option add gap_options --format=json '{"gap_id":"'"$GA_TRACKING_CODE"'","gap_enable":"1","gap_anonymize":1,"gap_location":"header","admin_area":1}'
       else
            wp option update gap_options --format=json '{"gap_id":"'"$GA_TRACKING_CODE"'","gap_enable":"1","gap_anonymize":1,"gap_location":"header","admin_area":1}'
        fi

      ;;
  *)
    usage
    ;;
esac;
# End of command case.

# Flush the rewrite cache from DB
wp rewrite flush

# Additional tasks only for microsites.
if [ "$MICROSITE_FLAG" -eq "1" ] ; then

    # Install en_GB language
    if ! $(wp language core list --status=installed --fields=language --format=csv | grep -qE "^en_GB"); then
      wp language core install en_GB
      wp site switch-language en_GB
    fi

    # Update DB if any.
    wp core update-db
    # Update language core if any
    wp language core update

    # Apply SAML config & other additional configs
    PHP=`which php`;

    # Apply SAML Unique entity config - Don't apply for dummy sites
    if [[ "$MICROSITE_FOLDER_NAME" = *dummy-* ]] ; then
      # Disable caching for testing downtime
      wp option set options_vf_cache_disabled 1
    else
       wp option set onelogin_saml_advanced_settings_sp_entity_id "${ENVIRONMENT}.$MICROSITE_FOLDER_NAME"
      $PHP -f ${MICROSITE_PATH}/bin/scripts/wp_vf_custom_code.php -- ${DEPLOY_PATH} ${ENVIRONMENT}
    fi

    # Close/delete comments & pingbacks
    wp comment delete 1 --force || true
    wp db query "DELETE FROM wp_comments WHERE comment_approved != 1;";
    wp db query "DELETE FROM wp_commentmeta WHERE comment_id NOT IN (SELECT comment_ID FROM wp_comments);";
    wp db query "UPDATE wp_posts SET comment_status = 'closed', ping_status = 'closed';";
    wp db query "UPDATE wp_options SET option_value = 'closed' WHERE option_name = 'default_comment_status';";
    wp db query "UPDATE wp_options SET option_value = 'closed' WHERE option_name = 'default_ping_status';";

    # Set default group_admin role (Generated by custom plugin) for any new register user
    wp option set default_role "group_editor"

    # Clear the cached API calls if any.
    trash_ids="$(wp post list --post_type='vf_cache' --format=ids)"
    if [ -n "$trash_ids" ]; then
        wp post delete $trash_ids --force
    fi;
fi

echo "Successfully completed VF default configuration!!!"
