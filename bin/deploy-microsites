#!/bin/bash

set -x;
set -e;
set -u;

# determine root of repo
ROOT=$(cd $(dirname ${0})/.. 2>/dev/null && pwd -P);
cd ${ROOT};
## set environment & common variables
source ${ROOT}/common_config.sh ${1:-invalid};

# set default variables
declare -a file_name_array;
FILES=./microsites/*.txt
HTACCESS_PREFIX_PATH="/";

function usage {
  echo "Deploy Script for VF microsites to virtual machines"
  echo "";
  echo "Usage: $0 <dev|stage|prod>";
  echo "";
  exit 1;
}

# Validate if we have correct required parameters to execute the script.
if [ -z "${1: }" ]; then
  usage;
  exit 1
fi

# check we have a list of servers to deploy to
[ -z "${SERVER}" ] && echo "No server specified, cannot continue." && exit 1;

# check site has been built
[ ! -d "${LOCAL_CORE_PATH}" ] && echo "Site must be built first, cannot continue" && exit 1;

###### TODO(sandeep): - Add below commmit checks once we deploy to stage & prod ######
# Check if the last commit consist of 'bin' changes or not
# If there are bin changes then it needs to deploy on all microsites else only deploy specific site.
# FULL_DEPLOY=1 -- means deploy all sites
#[ -z "$(git diff-tree --name-only HEAD^ | grep -E 'bin')" ] && FULL_DEPLOY=0 || FULL_DEPLOY=1

# if 'FULL_DEPLOY=0' then check what are the changes or which specific site changes
#if [ $FULL_DEPLOY = "0" ]; then
#    LIST_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD^ | grep "txt");
#    echo $LIST_FILES;
#fi


# run deployment
for _SERVER in ${SERVER};
do

    # Create temporary logs folder to log all deployment output
    ssh ${SSH_OWNER}@${_SERVER} "rm -rf ${DEPLOYMENT_LOG_MAIN_FOLDER} && mkdir -pv ${DEPLOYMENT_LOG_MAIN_FOLDER} && mkdir -pv ${MICROSITE_DEBUG_LOG_FOLDER}";

    for f in $FILES; do
      echo "Processing $f file..."

      # capture contents of file
      CONTENTS=$(cat $f);
      FILE_NAME=$(basename $f);
      file_name_array1+="$FILE_NAME";
      file_name_array+=("$FILE_NAME")

      #extract specific variables defined in file, delimited by set characters
      DELIMITER=":";
      for VARS in site_title site_email_id site_folder_name who_slug what_slug where_slug site_theme ; do
        # set variable named above, variable will be defined but empty if not found in .txt file
        declare "$VARS=$(echo -e "$CONTENTS" | grep -E "^$VARS$DELIMITER" | cut -d"$DELIMITER" -f2)";
      done;

      # deploy the site
      # ...

        echo "Folder Name - "$site_folder_name;
        echo "Starting deployment for site :- $site_title";

        # Step 1 - Create site folders
        # Create microsite folder

        # Get microsite folder & set microsite related variables
        microsite_deploy_data=($(microsite_deploy_profile_data "$site_theme" "$site_folder_name"));
        MICROSITE_PATH="${microsite_deploy_data[0]}";
        MICROSITE_SYM_PATH="${microsite_deploy_data[1]}";
        MICROSITE_FOLDER_NAME="${microsite_deploy_data[2]}";
        HTACCESS_PREFIX_PATH="${microsite_deploy_data[3]}";
        MICROSITE_SITE_URL="${microsite_deploy_data[9]}";

        ### Check if a directory does not exist ###
        if [ ! -d "${MICROSITE_PATH}" ]
        then
            ssh ${SSH_OWNER}@${_SERVER} "mkdir -pv ${MICROSITE_PATH}";
        fi

        # Rsync code
        rsync -acv --delete-after --exclude-from=.gitignore --exclude=.git ${LOCAL_CORE_PATH}/. ${SSH_OWNER}@${_SERVER}:${MICROSITE_PATH}/;

        # create owner folders
        ssh ${SSH_OWNER}@${_SERVER} "/nfs/public/rw/webdevel/projects/drupal/bin/create_dir_owner $ENVIRONMENT $DEPLOY_INSTANCE $MICROSITE_FOLDER_NAME";

        # create user folders
        ssh ${SSH_APACHE}@${_SERVER} "/nfs/public/rw/webdevel/projects/drupal/bin/create_dir_user $ENVIRONMENT $DEPLOY_INSTANCE $MICROSITE_FOLDER_NAME";

        # ensure directories exist
        ssh ${SSH_OWNER}@${_SERVER} "mkdir -pv ${MICROSITE_PATH}/${RELATIVE_SETTINGS_SRC}";

        # Step 2 - Create NFS folders
        # locations on NFS
        NFS_FILES_SRC=/nfs/public/rw/webdevel/projects/drupal/files/${ENVIRONMENT}/${DEPLOY_INSTANCE}/${MICROSITE_FOLDER_NAME}/public
        NFS_SQLDUMP_SRC=/nfs/public/rw/webdevel/projects/drupal/dump.sql.d/${ENVIRONMENT}/${DEPLOY_INSTANCE}/${MICROSITE_FOLDER_NAME}
        NFS_TEMP_SRC=/nfs/public/rw/webdevel/projects/drupal/tmp/${ENVIRONMENT}/${DEPLOY_INSTANCE}/${MICROSITE_FOLDER_NAME}
        NFS_WP_SETTINGS_SRC=/nfs/public/rw/webdevel/projects/drupal/settings.php.d/${ENVIRONMENT}/${DEPLOY_INSTANCE}/${MICROSITE_FOLDER_NAME}/wp-config.php

        ssh ${SSH_OWNER}@${_SERVER} "mkdir -pv ${NFS_SQLDUMP_SRC} && mkdir -pv ${NFS_TEMP_SRC}";

        # create symlinks
        ssh ${SSH_OWNER}@${_SERVER} "rm -rf ${MICROSITE_PATH}/${RELATIVE_FILES_SRC} || true; ln -svf ${NFS_FILES_SRC} ${MICROSITE_PATH}/${RELATIVE_FILES_SRC}";
        ssh ${SSH_OWNER}@${_SERVER} "rm -rf ${MICROSITE_PATH}/${RELATIVE_SQLDUMP_SRC} || true; ln -svf ${NFS_SQLDUMP_SRC} ${MICROSITE_PATH}/${RELATIVE_SQLDUMP_SRC}";
        ssh ${SSH_OWNER}@${_SERVER} "rm -rf ${MICROSITE_PATH}/${RELATIVE_TEMP_SRC} || true; ln -svf ${NFS_TEMP_SRC} ${MICROSITE_PATH}/${RELATIVE_TEMP_SRC}";

        # Step 3 - Create DB
        ssh ${SSH_OWNER}@${_SERVER} "/nfs/public/rw/webdevel/projects/drupal/bin/mysql_create_db_script '${ENVIRONMENT}' '${DEPLOY_INSTANCE}' '$MICROSITE_FOLDER_NAME'" || true;

        # create wp-config.php file on VM
        ssh ${SSH_OWNER}@${_SERVER} '~/bin/create-settings '${NFS_WP_SETTINGS_SRC}' '${MICROSITE_PATH}'/'${RELATIVE_SETTINGS_SRC}'/wp-config.php '${ENVIRONMENT}' '${DEPLOY_INSTANCE}' '${SERVER};

        # create & symlink wp-config.php
        ssh ${SSH_OWNER}@${_SERVER} "ln -svf ${MICROSITE_PATH}/${RELATIVE_SETTINGS_SRC}/wp-config.php ${MICROSITE_PATH}/${WP_SETTINGS_PHP}";
        ssh ${SSH_OWNER}@${_SERVER} "chmod u+w ${MICROSITE_PATH}/${RELATIVE_DOCUMENT_ROOT} ${MICROSITE_PATH}/${WP_SETTINGS_PHP} || true";

        # create files-uploads symlink
        ssh ${SSH_OWNER}@${_SERVER} "chmod u+w ${MICROSITE_PATH}/${RELATIVE_DOCUMENT_ROOT} || true";
        ssh ${SSH_OWNER}@${_SERVER} "rm -rf ${MICROSITE_PATH}/${USER_FILES} || true; ln -svf ${USER_FILES_SYMLINK} ${MICROSITE_PATH}/${USER_FILES}";

        # ensure no write permissions for group or other
        ssh ${SSH_OWNER}@${_SERVER} "chmod -R go-w ${MICROSITE_PATH}";

        # Create symlink of site folder (_sitename) to (sitename) to follow apache redirect rule
        ssh ${SSH_OWNER}@${_SERVER} "cd ${MICROSITE_PATH}; rm -rf ${MICROSITE_SYM_PATH} || true; ln -svf _$site_folder_name/${RELATIVE_DOCUMENT_ROOT} ${MICROSITE_SYM_PATH}";

        echo "Folder/NFS setup completed for site :- $site_title";

        echo "Update URL in wp-config for site :- $site_title";
        # Overwrite the site url in wp-config.php file
        ssh ${SSH_OWNER}@${_SERVER} "cd ${MICROSITE_PATH}/ && sed -E -i'' '/(WP_HOME|WP_SITEURL)/d' ${RELATIVE_SETTINGS_SRC}/wp-config.php && ~/bin/wp --path=${MICROSITE_PATH}/${RELATIVE_DOCUMENT_ROOT} config set WP_HOME '${MICROSITE_SITE_URL}' && ~/bin/wp --path=${MICROSITE_PATH}/${RELATIVE_DOCUMENT_ROOT} config set WP_SITEURL '${MICROSITE_SITE_URL}'";


       echo "Create .htaccess file"
       echo "
        # BEGIN WordPress
        <IfModule mod_rewrite.c>
        RewriteEngine On \
        RewriteBase $HTACCESS_PREFIX_PATH
        RewriteRule ^index\.php$ - [L]
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteCond %{REQUEST_FILENAME} !-d
        RewriteRule . ${HTACCESS_PREFIX_PATH}index.php [L]
        </IfModule>
        # END WordPress" | ssh ${SSH_OWNER}@${_SERVER} "cat > ${MICROSITE_PATH}/${RELATIVE_DOCUMENT_ROOT}/.htaccess"

        # Run DB related command only on one server.
       if [ "$_SERVER" = "$MASTER_SERVER" ]; then
           # Call VF bootstrap process & run in background
           ssh -f ${SSH_OWNER}@${MASTER_SERVER} "export WP_SITE_ADMIN_PASSWORD="$WP_SITE_ADMIN_PASSWORD"; cd ${MICROSITE_PATH}/ && nohup bin/vf_bootstrap microsite_setup $ENVIRONMENT $f $_SERVER >> ${MICROSITE_DEBUG_LOG_FOLDER}/bootstrap_output_$site_folder_name.txt 2>&1 &"
       fi

    done #end of for $files loop

    #copy settings, conf, cron, bin folders to nfs in HH datacentre
    ssh ${SSH_OWNER}@ebi-cli '/nfs/public/rw/webdevel/projects/drupal/bin/rsync_dir_datacentres_owner';
    #copy files, tmp folders to nfs in HH datacentre
    ssh ${SSH_APACHE}@ebi-cli '/nfs/public/rw/webdevel/projects/drupal/bin/rsync_dir_datacentres_user';

    sleep 5;

    if [ "$_SERVER" = "$MASTER_SERVER" ]; then
        # Trigger background script to check the overall microsite deployment status & display the status
        ssh -tt ${SSH_OWNER}@${_SERVER} "cd ${MICROSITE_PATH}/ && export TERM=xterm; sh bin/scripts/bgjob-microsites.sh \"${file_name_array[@]}\""
     fi

done;

