#!/bin/bash

# halt on errors
set -x
set -e;
set -u;

ENVIRONMENT=local;

# determine root of repo
ROOT=$(cd $(dirname ${0})/.. 2>/dev/null && pwd -P);
cd ${ROOT};
# set environment variables
set -a; source ${ROOT}/.env; set +a;

function usage {
  echo "Local development docker utilities";
  echo "";
  echo "Usage: bin/dev <function> [parameters]";
  echo "";
  echo "  Function is one of:";
  echo "    up                 - spin up docker container for local development";
  echo "    down               - spin down docker container for local development";
  echo "";
  echo "    launch [url]       - open browser for local development";
  echo "    login              - open browser and login ";
  echo "    pma|solr|mailhog   - open local development utilities";
  echo "";
  echo "    logs [container]   - view logs from docker container";
  echo "      optional [container] is one (or more) of apache|php|mysql|pma|mailhog|memcached";
  echo "";
  echo "    ssh [command]";
  echo "      optional [command] can be shell command to run, otherwise will be interactive shell";
  echo "";
  echo "    quick_blank           - setup basic wordpress installation, spin up docker,";
  echo "                            initialise solr (if enabled), login in browser";
  echo "";
  exit 1;
}

# check for example content in .env
[ ${PROJECT_NAME} = "example.com" ] && echo "Please edit .env before continuing" && exit 1;

# check system requirements
if ! which docker-compose >/dev/null 2>&1; then
  echo "This script requires docker-compose installed on the local machine";
fi;

# validate the command
[ -z "${1:-}" ] && usage;

# get the command and run it
COMMAND="${1}"; shift;
case "${COMMAND}" in

  create_directories)
      echo "Creating required directories"
      mkdir -p ${LOCAL_CORE_PATH}/${RELATIVE_DOCUMENT_ROOT}
      mkdir -p ${LOCAL_CORE_PATH}/${RELATIVE_SQLDATA_SRC}
   ;;

  create_symlinks)
    echo "Creating symlinks"
    [ -d ${USER_FILES} ] && chmod u+w ${USER_FILES} && rm -rf ${USER_FILES} || true
    ln -sf ${USER_FILES_SYMLINK} ${USER_FILES}
  ;;

  destroy_symlinks)
    echo "Destroying symlinks"
    rm -f ${USER_FILES} || true
  ;;

  create_vf_symlinks)
      echo "Creating symlinks"
      [ -d ${RELATIVE_DOCUMENT_ROOT} ] && chmod u+w ${RELATIVE_DOCUMENT_ROOT} || true

      # Start symlink for plugins
      if [ -d "${WP_DEST_PLUGIN_PATH}" ]; then
        echo "Creating Plugins symlinks";
        PLUGIN_DIRS=$(ls ${WP_SOURCE_PLUGIN_PATH} | xargs);
        for DIR in $PLUGIN_DIRS; do
          ln -sf ../../../wp-content/plugins/${DIR} ${WP_DEST_PLUGIN_PATH};
        done;
      fi

      # Start symlink for themes
      if [ -d "${WP_DEST_THEMES_PATH}" ]; then
        echo "Creating Themes symlinks";
        THEME_DIRS=$(ls ${WP_SOURCE_THEMES_PATH} | xargs);
        for DIR in $THEME_DIRS; do
          ln -sf ../../../wp-content/themes/${DIR} ${WP_DEST_THEMES_PATH};
        done;
      fi;
  ;;

  destroy_directories)
    echo "Destroying directories"
    rm -rf ${LOCAL_CORE_PATH}/${RELATIVE_SQLDATA_SRC} || true
    rm -rf ${LOCAL_CORE_PATH}/composer.lock || true
    rm -rf ${LOCAL_CORE_PATH}/vendor || true
  ;;

  create_config)
    DOCKER_URL=${PROJECT_NAME}.docker.localhost;
    DOCKER_PORT=$(docker-compose port traefik 80 | cut -d: -f2);
    echo "Creating Wordpress settings"
    [ -f ${WP_SETTINGS_PHP} ] && chmod u+w ${WP_SETTINGS_PHP} || true
    cp ${WP_DEFAULT_SETTINGS_PHP} ${WP_SETTINGS_PHP}

    sed -i -e "/DB_NAME/s/'[^']*'/'${DOCKER_DATABASE}'/2" ${WP_SETTINGS_PHP}
    sed -i -e "/DB_HOST/s/'[^']*'/'mysql'/2" ${WP_SETTINGS_PHP}
    sed -i -e "/DB_USER/s/'[^']*'/'${DOCKER_DATABASE_USER}'/2" ${WP_SETTINGS_PHP}
    sed -i -e "/DB_PASSWORD/s/'[^']*'/'${DOCKER_DATABASE_PASS}'/2" ${WP_SETTINGS_PHP}
  ;;

  destroy_config)
    echo "Destroying Wordpress settings"
    rm -f ${WP_SETTINGS_PHP} || true
  ;;

  # To create empty blank wordpress site on local
  quick_blank)
    ${ROOT}/bin/dev up;
    DOCKER_URL=${PROJECT_NAME}.docker.localhost;
    DOCKER_PORT=$(docker-compose port traefik 80 | cut -d: -f2);
    SITE_URL=http://${DOCKER_URL}:${DOCKER_PORT};
    ${ROOT}/bin/dev create_vf_symlinks
    ${ROOT}/bin/dev ssh "${LOCAL_CORE_PATH}/bin/scripts/setup_group.sh ${SITE_URL}";
    ${ROOT}/bin/dev login;
  ;;

  # internal only function to wait for db import for complete
  db_wait)
    if [ -f ${LOCAL_CORE_PATH}/${RELATIVE_SQLDUMP_SRC}/* ] || [ ! -d ${LOCAL_CORE_PATH}/${RELATIVE_SQLDATA_SRC}/${DOCKER_DATABASE} ]; then
      echo "Please wait for database to import...";
      # wait for drupal database to start importing
      echo "Waiting for ${LOCAL_CORE_PATH}/${RELATIVE_SQLDATA_SRC}/${DOCKER_DATABASE} to be initialized or created";
      echo "(this may take some time)";
      while [ ! -d ${LOCAL_CORE_PATH}/${RELATIVE_SQLDATA_SRC}/${DOCKER_DATABASE} ]; do sleep 1; done;
      # wait for database to restart
      PID=$(ls ${LOCAL_CORE_PATH}/${RELATIVE_SQLDATA_SRC}/*.pid);
      echo "Waiting for ${PID} to end";
      while [ -f ${PID} ]; do echo -n ''; done;
      # wait for reboot
      echo -n "Waiting for new ${LOCAL_CORE_PATH}/${RELATIVE_SQLDATA_SRC}/*.pid";
      while [ ! -f ${LOCAL_CORE_PATH}/${RELATIVE_SQLDATA_SRC}/*.pid ]; do sleep 1; done;
      PID=$(ls ${LOCAL_CORE_PATH}/${RELATIVE_SQLDATA_SRC}/*.pid);
      echo " - ${PID} started";
    fi;
  ;;

  pre_up)
    ${ROOT}/bin/dev create_directories
    ${ROOT}/bin/dev create-vendor
  ;;

  post_stop)
    ${ROOT}/bin/dev destroy_directories
    ${ROOT}/bin/dev destroy_symlinks
  ;;

  post_prune)
    ${ROOT}/bin/dev post_stop
    rm -rf ${LOCAL_CORE_PATH}/${RELATIVE_SQLDATA_SRC}
    ;;

  post_up)
    #${ROOT}/bin/dev create_symlinks
   ;;

 # spin up docker containers
  create_htaccess)
    ${ROOT}/bin/dev ssh "cp ${LOCAL_CORE_PATH}/bin/scripts/wp-cli.yml ${RELATIVE_DOCUMENT_ROOT}/ && cd ${RELATIVE_DOCUMENT_ROOT} && wp rewrite flush --hard"
  ;;

  # spin up docker containers
  up)
    echo "Starting up containers for for ${PROJECT_NAME}..."
    ${ROOT}/bin/dev pre_up;
    DOCKER_URL=${PROJECT_NAME}.docker.localhost;
    DOCKER_PORT=$(docker-compose port traefik 80 | cut -d: -f2);
    SITE_URL=http://${DOCKER_URL}:${DOCKER_PORT};
    docker-compose pull --parallel;
    docker-compose up -d --remove-orphans;
    ${ROOT}/bin/dev db_wait;
    # We always run setup to ensure basic paramaters are setup/reset (like htaccess)
    ${ROOT}/bin/dev ssh "${LOCAL_CORE_PATH}/bin/scripts/setup.sh ${SITE_URL}"; 
    # ${ROOT}/bin/dev create_htaccess;
    ${ROOT}/bin/dev post_up;
    ${ROOT}/bin/dev login;
  ;;

  # spin down docker containers
  stop | down)
    echo "Stopping containers for ${PROJECT_NAME}...";
    docker-compose stop;
    ${ROOT}/bin/dev post_stop
    ;;

  prune)
    echo "Removing containers for ${PROJECT_NAME}..."
    docker-compose down -v
    ${ROOT}/bin/dev post_prune
    ;;

  # launch container admin sites
  pma | solr | mailhog)
    DOCKER_URL=${PROJECT_NAME}.docker.localhost;
    DOCKER_PORT=$(docker-compose port traefik 80 | cut -d: -f2);
    ${ROOT}/bin/dev launch http://${COMMAND}.${DOCKER_URL}:${DOCKER_PORT};
    ;;

  # launch site, with one-time login
  login)
    echo "Getting one-time-login url...";
    DOCKER_URL=${PROJECT_NAME}.docker.localhost;
    DOCKER_PORT=$(docker-compose port traefik 80 | cut -d: -f2);
    ${ROOT}/bin/dev ssh "cp ${LOCAL_CORE_PATH}/bin/scripts/auto_login.php ${RELATIVE_DOCUMENT_ROOT}/";
    ${ROOT}/bin/dev launch http://${DOCKER_URL}:${DOCKER_PORT}/auto_login.php;
  ;;

  # open browser
  launch)
    DOCKER_URL=${PROJECT_NAME}.docker.localhost;
    if [ -d "/Applications/Google Chrome.app" ]; then
      # force chrome as browser, as this does not need adjustment in /etc/hosts
      BROWSER="-a/Applications/Google Chrome.app";
    else
      BROWSER="";
      # insert domain into /etc/hosts
      if ! grep -Fq "${DOCKER_URL}" /etc/hosts; then
        echo "Adding ${DOCKER_URL} to /etc/hosts";
        sudo $SHELL -c "echo '127.0.0.1 ${DOCKER_URL} # added $(date) by ${ROOT}/bin/dev' >> /etc/hosts";
      fi;
    fi;

    if [ -z "${1:-}" ]; then
      DOCKER_PORT=$(docker-compose port traefik 80 | cut -d: -f2);
      open "${BROWSER}" http://${DOCKER_URL}:${DOCKER_PORT};
    else
      open "${BROWSER}" ${1};
    fi;
    ;;

  # open ssh-like shell to docker container
  bash | ssh | shell)
    # we need to use docker exec $CONTAINER rather than docker-compose exec php
    # as you cannot use -w and -e with docker-compose exec
    CONTAINER=$(docker ps --filter name="${PROJECT_NAME}_php" --format "{{ .ID }}");
    COLUMNS=$(tput cols);
    LINES=$(tput lines);
    if [ -z "${1:-}" ]; then
      docker exec -w ${VM_CORE_PATH} -ti -e COLUMNS -e LINES ${CONTAINER} bash;
    else
      docker exec -w ${VM_CORE_PATH} -ti -e COLUMNS -e LINES ${CONTAINER} bash -c "$*";
    fi;
    ;;

  # view logs on docker container
  logs)
    docker-compose logs -f $*;
    ;;

  # build vendor directory from composer.json (D8)
  create-vendor)
      if [ -f composer.json ]; then
        composer install --no-progress;
      fi
    ;;

  # internal only function to display information about site
  launch-advice)
    DOCKER_URL=${PROJECT_NAME}.docker.localhost;
    DOCKER_PORT=$(docker-compose port traefik 80 | cut -d: -f2);
    echo;
    echo "Open site with";
    echo "  bin/dev launch";
    echo "or visit";
    echo "  http://${DOCKER_URL}:${DOCKER_PORT}";
    echo;
    echo "Open and login with";
    echo "  bin/dev login";
    echo;
    ;;


  *)
    usage
    ;;
esac;

echo "";
